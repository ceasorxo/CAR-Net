def caculate_Ct11(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct11 = (C12*C13*C21*C22*C31 + C12*C13*C21*C22*C32 + C12*C13*C21*C23*C31 + C12*C13*C21*C22*C33
           + C12*C13*C21*C23*C32 + C12*C13*C21*C23*C33 + C12*C13*C21*C31*C32 + C12*C21*C22*C23*C31
           + C12*C13*C21*C31*C33 + C12*C13*C22*C31*C32 + C12*C21*C22*C23*C32 + C13*C21*C22*C23*C31
           + C12*C13*C22*C31*C33 + C12*C13*C23*C31*C32 + C12*C21*C22*C23*C33 + C13*C21*C22*C23*C32
           + C12*C13*C23*C31*C33 + C13*C21*C22*C23*C33 + C12*C21*C22*C31*C33 + C12*C21*C23*C31*C32
           + C12*C21*C22*C32*C33 + C12*C22*C23*C31*C32 + C13*C21*C22*C31*C33 + C13*C21*C23*C31*C32
           + C12*C21*C23*C32*C33 + C12*C22*C23*C31*C33 + C13*C21*C22*C32*C33 + C13*C22*C23*C31*C32
           + C13*C21*C23*C32*C33 + C13*C22*C23*C31*C33 + C12*C21*C31*C32*C33 + C12*C22*C31*C32*C33
           + C13*C21*C31*C32*C33 + C12*C23*C31*C32*C33 + C13*C22*C31*C32*C33 + C13*C23*C31*C32*C33)/(C12*C13*C21*C31 + C12*C13*C21*C32 + C12*C13*C22*C31 + C12*C13*C21*C33 + C12*C13*C22*C32
           + C12*C13*C23*C31 + C12*C13*C22*C33 + C12*C13*C23*C32 + C12*C13*C23*C33 + C12*C21*C23*C31
           + C13*C21*C22*C31 + C12*C21*C23*C32 + C12*C22*C23*C31 + C13*C21*C22*C32 + C12*C21*C23*C33
           + C12*C22*C23*C32 + C13*C21*C22*C33 + C13*C22*C23*C31 + C12*C22*C23*C33 + C13*C22*C23*C32
           + C13*C22*C23*C33 + C12*C21*C31*C33 + C13*C21*C31*C32 + C21*C22*C23*C31 + C12*C21*C32*C33
           + C12*C22*C31*C33 + C13*C22*C31*C32 + C21*C22*C23*C32 + C12*C22*C32*C33 + C12*C23*C31*C33
           + C13*C21*C32*C33 + C13*C23*C31*C32 + C21*C22*C23*C33 + C12*C23*C32*C33 + C13*C22*C32*C33
           + C13*C23*C32*C33 + C21*C22*C31*C33 + C21*C23*C31*C32 + C21*C22*C32*C33 + C22*C23*C31*C32
           + C21*C23*C32*C33 + C22*C23*C31*C33 + C21*C31*C32*C33
           + C22*C31*C32*C33 + C23*C31*C32*C33) + C11
    Ct11 = round(Ct11,2)
    return Ct11

def caculate_Ct12(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct12 = (C22*C23*C11*C12*C31 + C22*C23*C11*C12*C32 + C22*C23*C11*C13*C31 + C22*C23*C11*C12*C33
            + C22*C23*C11*C13*C32 + C22*C23*C11*C13*C33 + C22*C23*C11*C31*C32 + C22*C11*C12*C13*C31
            + C22*C23*C11*C31*C33 + C22*C23*C12*C31*C32 + C22*C11*C12*C13*C32 + C23*C11*C12*C13*C31
            + C22*C23*C12*C31*C33 + C22*C23*C13*C31*C32 + C22*C11*C12*C13*C33 + C23*C11*C12*C13*C32
            + C22*C23*C13*C31*C33 + C23*C11*C12*C13*C33 + C22*C11*C12*C31*C33 + C22*C11*C13*C31*C32
            + C22*C11*C12*C32*C33 + C22*C12*C13*C31*C32 + C23*C11*C12*C31*C33 + C23*C11*C13*C31*C32
            + C22*C11*C13*C32*C33 + C22*C12*C13*C31*C33 + C23*C11*C12*C32*C33 + C23*C12*C13*C31*C32
            + C23*C11*C13*C32*C33 + C23*C12*C13*C31*C33 + C22*C11*C31*C32*C33 + C22*C12*C31*C32*C33
            + C23*C11*C31*C32*C33 + C22*C13*C31*C32*C33 + C23*C12*C31*C32*C33 + C23*C13*C31*C32*C33)/(C22*C23*C11*C31 + C22*C23*C11*C32 + C22*C23*C12*C31 + C22*C23*C11*C33 + C22*C23*C12*C32
            + C22*C23*C13*C31 + C22*C23*C12*C33 + C22*C23*C13*C32 + C22*C23*C13*C33 + C22*C11*C13*C31
            + C23*C11*C12*C31 + C22*C11*C13*C32 + C22*C12*C13*C31 + C23*C11*C12*C32 + C22*C11*C13*C33
            + C22*C12*C13*C32 + C23*C11*C12*C33 + C23*C12*C13*C31 + C22*C12*C13*C33 + C23*C12*C13*C32
            + C23*C12*C13*C33 + C22*C11*C31*C33 + C23*C11*C31*C32 + C11*C12*C13*C31 + C22*C11*C32*C33
            + C22*C12*C31*C33 + C23*C12*C31*C32 + C11*C12*C13*C32 + C22*C12*C32*C33 + C22*C13*C31*C33
            + C23*C11*C32*C33 + C23*C13*C31*C32 + C11*C12*C13*C33 + C22*C13*C32*C33 + C23*C12*C32*C33
            + C23*C13*C32*C33 + C11*C12*C31*C33 + C11*C13*C31*C32 + C11*C12*C32*C33 + C12*C13*C31*C32
            + C11*C13*C32*C33 + C12*C13*C31*C33 + C11*C31*C32*C33
            + C12*C31*C32*C33 + C13*C31*C32*C33) + C21
    Ct12 = round(Ct12,2)
    return Ct12

def caculate_Ct13(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct13 = (C32*C33*C21*C22*C11 + C32*C33*C21*C22*C12 + C32*C33*C21*C23*C11 + C32*C33*C21*C22*C13
            + C32*C33*C21*C23*C12 + C32*C33*C21*C23*C13 + C32*C33*C21*C11*C12 + C32*C21*C22*C23*C11
            + C32*C33*C21*C11*C13 + C32*C33*C22*C11*C12 + C32*C21*C22*C23*C12 + C33*C21*C22*C23*C11
            + C32*C33*C22*C11*C13 + C32*C33*C23*C11*C12 + C32*C21*C22*C23*C13 + C33*C21*C22*C23*C12
            + C32*C33*C23*C11*C13 + C33*C21*C22*C23*C13 + C32*C21*C22*C11*C13 + C32*C21*C23*C11*C12
            + C32*C21*C22*C12*C13 + C32*C22*C23*C11*C12 + C33*C21*C22*C11*C13 + C33*C21*C23*C11*C12
            + C32*C21*C23*C12*C13 + C32*C22*C23*C11*C13 + C33*C21*C22*C12*C13 + C33*C22*C23*C11*C12
            + C33*C21*C23*C12*C13 + C33*C22*C23*C11*C13 + C32*C21*C11*C12*C13 + C32*C22*C11*C12*C13
            + C33*C21*C11*C12*C13 + C32*C23*C11*C12*C13 + C33*C22*C11*C12*C13 + C33*C23*C11*C12*C13)/(C32*C33*C21*C11 + C32*C33*C21*C12 + C32*C33*C22*C11 + C32*C33*C21*C13 + C32*C33*C22*C12
            + C32*C33*C23*C11 + C32*C33*C22*C13 + C32*C33*C23*C12 + C32*C33*C23*C13 + C32*C21*C23*C11
            + C33*C21*C22*C11 + C32*C21*C23*C12 + C32*C22*C23*C11 + C33*C21*C22*C12 + C32*C21*C23*C13
            + C32*C22*C23*C12 + C33*C21*C22*C13 + C33*C22*C23*C11 + C32*C22*C23*C13 + C33*C22*C23*C12
            + C33*C22*C23*C13 + C32*C21*C11*C13 + C33*C21*C11*C12 + C21*C22*C23*C11 + C32*C21*C12*C13
            + C32*C22*C11*C13 + C33*C22*C11*C12 + C21*C22*C23*C12 + C32*C22*C12*C13 + C32*C23*C11*C13
            + C33*C21*C12*C13 + C33*C23*C11*C12 + C21*C22*C23*C13 + C32*C23*C12*C13 + C33*C22*C12*C13
            + C33*C23*C12*C13 + C21*C22*C11*C13 + C21*C23*C11*C12 + C21*C22*C12*C13 + C22*C23*C11*C12
            + C21*C23*C12*C13 + C22*C23*C11*C13 + C21*C11*C12*C13
            + C22*C11*C12*C13 + C23*C11*C12*C13) + C31
    Ct13 = round(Ct13,2)
    return Ct13

def caculate_Ct21(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct21 = (C11*C13*C22*C21*C32 + C11*C13*C22*C21*C31 + C11*C13*C22*C23*C32 + C11*C13*C22*C21*C33
            + C11*C13*C22*C23*C31 + C11*C13*C22*C23*C33 + C11*C13*C22*C32*C31 + C11*C22*C21*C23*C32
            + C11*C13*C22*C32*C33 + C11*C13*C21*C32*C31 + C11*C22*C21*C23*C31 + C13*C22*C21*C23*C32
            + C11*C13*C21*C32*C33 + C11*C13*C23*C32*C31 + C11*C22*C21*C23*C33 + C13*C22*C21*C23*C31
            + C11*C13*C23*C32*C33 + C13*C22*C21*C23*C33 + C11*C22*C21*C32*C33 + C11*C22*C23*C32*C31
            + C11*C22*C21*C31*C33 + C11*C21*C23*C32*C31 + C13*C22*C21*C32*C33 + C13*C22*C23*C32*C31
            + C11*C22*C23*C31*C33 + C11*C21*C23*C32*C33 + C13*C22*C21*C31*C33 + C13*C21*C23*C32*C31
            + C13*C22*C23*C31*C33 + C13*C21*C23*C32*C33 + C11*C22*C32*C31*C33 + C11*C21*C32*C31*C33
            + C13*C22*C32*C31*C33 + C11*C23*C32*C31*C33 + C13*C21*C32*C31*C33 + C13*C23*C32*C31*C33)/(C11*C13*C22*C32 + C11*C13*C22*C31 + C11*C13*C21*C32 + C11*C13*C22*C33 + C11*C13*C21*C31
            + C11*C13*C23*C32 + C11*C13*C21*C33 + C11*C13*C23*C31 + C11*C13*C23*C33 + C11*C22*C23*C32
            + C13*C22*C21*C32 + C11*C22*C23*C31 + C11*C21*C23*C32 + C13*C22*C21*C31 + C11*C22*C23*C33
            + C11*C21*C23*C31 + C13*C22*C21*C33 + C13*C21*C23*C32 + C11*C21*C23*C33 + C13*C21*C23*C31
            + C13*C21*C23*C33 + C11*C22*C32*C33 + C13*C22*C32*C31 + C22*C21*C23*C32 + C11*C22*C31*C33
            + C11*C21*C32*C33 + C13*C21*C32*C31 + C22*C21*C23*C31 + C11*C21*C31*C33 + C11*C23*C32*C33
            + C13*C22*C31*C33 + C13*C23*C32*C31 + C22*C21*C23*C33 + C11*C23*C31*C33 + C13*C21*C31*C33
            + C13*C23*C31*C33 + C22*C21*C32*C33 + C22*C23*C32*C31 + C22*C21*C31*C33 + C21*C23*C32*C31
            + C22*C23*C31*C33 + C21*C23*C32*C33 + C22*C32*C31*C33
            + C21*C32*C31*C33 + C23*C32*C31*C33) + C12
    Ct21 = round(Ct21,2)
    return Ct21

def caculate_Ct22(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct22 = (C21*C23*C12*C11*C32 + C21*C23*C12*C11*C31 + C21*C23*C12*C13*C32 + C21*C23*C12*C11*C33
            + C21*C23*C12*C13*C31 + C21*C23*C12*C13*C33 + C21*C23*C12*C32*C31 + C21*C12*C11*C13*C32
            + C21*C23*C12*C32*C33 + C21*C23*C11*C32*C31 + C21*C12*C11*C13*C31 + C23*C12*C11*C13*C32
            + C21*C23*C11*C32*C33 + C21*C23*C13*C32*C31 + C21*C12*C11*C13*C33 + C23*C12*C11*C13*C31
            + C21*C23*C13*C32*C33 + C23*C12*C11*C13*C33 + C21*C12*C11*C32*C33 + C21*C12*C13*C32*C31
            + C21*C12*C11*C31*C33 + C21*C11*C13*C32*C31 + C23*C12*C11*C32*C33 + C23*C12*C13*C32*C31
            + C21*C12*C13*C31*C33 + C21*C11*C13*C32*C33 + C23*C12*C11*C31*C33 + C23*C11*C13*C32*C31
            + C23*C12*C13*C31*C33 + C23*C11*C13*C32*C33 + C21*C12*C32*C31*C33 + C21*C11*C32*C31*C33
            + C23*C12*C32*C31*C33 + C21*C13*C32*C31*C33 + C23*C11*C32*C31*C33 + C23*C13*C32*C31*C33)/(C21*C23*C12*C32 + C21*C23*C12*C31 + C21*C23*C11*C32 + C21*C23*C12*C33 + C21*C23*C11*C31
            + C21*C23*C13*C32 + C21*C23*C11*C33 + C21*C23*C13*C31 + C21*C23*C13*C33 + C21*C12*C13*C32
            + C23*C12*C11*C32 + C21*C12*C13*C31 + C21*C11*C13*C32 + C23*C12*C11*C31 + C21*C12*C13*C33
            + C21*C11*C13*C31 + C23*C12*C11*C33 + C23*C11*C13*C32 + C21*C11*C13*C33 + C23*C11*C13*C31
            + C23*C11*C13*C33 + C21*C12*C32*C33 + C23*C12*C32*C31 + C12*C11*C13*C32 + C21*C12*C31*C33
            + C21*C11*C32*C33 + C23*C11*C32*C31 + C12*C11*C13*C31 + C21*C11*C31*C33 + C21*C13*C32*C33
            + C23*C12*C31*C33 + C23*C13*C32*C31 + C12*C11*C13*C33 + C21*C13*C31*C33 + C23*C11*C31*C33
            + C23*C13*C31*C33 + C12*C11*C32*C33 + C12*C13*C32*C31 + C12*C11*C31*C33 + C11*C13*C32*C31
            + C12*C13*C31*C33 + C11*C13*C32*C33 + C12*C32*C31*C33
            + C11*C32*C31*C33 + C13*C32*C31*C33) + C22
    Ct22 = round(Ct22,2)
    return Ct22

def caculate_Ct23(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct23 = (C31*C33*C22*C21*C12 + C31*C33*C22*C21*C11 + C31*C33*C22*C23*C12 + C31*C33*C22*C21*C13
            + C31*C33*C22*C23*C11 + C31*C33*C22*C23*C13 + C31*C33*C22*C12*C11 + C31*C22*C21*C23*C12
            + C31*C33*C22*C12*C13 + C31*C33*C21*C12*C11 + C31*C22*C21*C23*C11 + C33*C22*C21*C23*C12
            + C31*C33*C21*C12*C13 + C31*C33*C23*C12*C11 + C31*C22*C21*C23*C13 + C33*C22*C21*C23*C11
            + C31*C33*C23*C12*C13 + C33*C22*C21*C23*C13 + C31*C22*C21*C12*C13 + C31*C22*C23*C12*C11
            + C31*C22*C21*C11*C13 + C31*C21*C23*C12*C11 + C33*C22*C21*C12*C13 + C33*C22*C23*C12*C11
            + C31*C22*C23*C11*C13 + C31*C21*C23*C12*C13 + C33*C22*C21*C11*C13 + C33*C21*C23*C12*C11
            + C33*C22*C23*C11*C13 + C33*C21*C23*C12*C13 + C31*C22*C12*C11*C13 + C31*C21*C12*C11*C13
            + C33*C22*C12*C11*C13 + C31*C23*C12*C11*C13 + C33*C21*C12*C11*C13 + C33*C23*C12*C11*C13)/(C31*C33*C22*C12 + C31*C33*C22*C11 + C31*C33*C21*C12 + C31*C33*C22*C13 + C31*C33*C21*C11
            + C31*C33*C23*C12 + C31*C33*C21*C13 + C31*C33*C23*C11 + C31*C33*C23*C13 + C31*C22*C23*C12
            + C33*C22*C21*C12 + C31*C22*C23*C11 + C31*C21*C23*C12 + C33*C22*C21*C11 + C31*C22*C23*C13
            + C31*C21*C23*C11 + C33*C22*C21*C13 + C33*C21*C23*C12 + C31*C21*C23*C13 + C33*C21*C23*C11
            + C33*C21*C23*C13 + C31*C22*C12*C13 + C33*C22*C12*C11 + C22*C21*C23*C12 + C31*C22*C11*C13
            + C31*C21*C12*C13 + C33*C21*C12*C11 + C22*C21*C23*C11 + C31*C21*C11*C13 + C31*C23*C12*C13
            + C33*C22*C11*C13 + C33*C23*C12*C11 + C22*C21*C23*C13 + C31*C23*C11*C13 + C33*C21*C11*C13
            + C33*C23*C11*C13 + C22*C21*C12*C13 + C22*C23*C12*C11 + C22*C21*C11*C13 + C21*C23*C12*C11
            + C22*C23*C11*C13 + C21*C23*C12*C13 + C22*C12*C11*C13
            + C21*C12*C11*C13 + C23*C12*C11*C13) + C32
    Ct23 = round(Ct23,2)
    return Ct23

def caculate_Ct31(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct31 = (C12*C11*C23*C22*C33 + C12*C11*C23*C22*C32 + C12*C11*C23*C21*C33 + C12*C11*C23*C22*C31
            + C12*C11*C23*C21*C32 + C12*C11*C23*C21*C31 + C12*C11*C23*C33*C32 + C12*C23*C22*C21*C33
            + C12*C11*C23*C33*C31 + C12*C11*C22*C33*C32 + C12*C23*C22*C21*C32 + C11*C23*C22*C21*C33
            + C12*C11*C22*C33*C31 + C12*C11*C21*C33*C32 + C12*C23*C22*C21*C31 + C11*C23*C22*C21*C32
            + C12*C11*C21*C33*C31 + C11*C23*C22*C21*C31 + C12*C23*C22*C33*C31 + C12*C23*C21*C33*C32
            + C12*C23*C22*C32*C31 + C12*C22*C21*C33*C32 + C11*C23*C22*C33*C31 + C11*C23*C21*C33*C32
            + C12*C23*C21*C32*C31 + C12*C22*C21*C33*C31 + C11*C23*C22*C32*C31 + C11*C22*C21*C33*C32
            + C11*C23*C21*C32*C31 + C11*C22*C21*C33*C31 + C12*C23*C33*C32*C31 + C12*C22*C33*C32*C31
            + C11*C23*C33*C32*C31 + C12*C21*C33*C32*C31 + C11*C22*C33*C32*C31 + C11*C21*C33*C32*C31)/(C12*C11*C23*C33 + C12*C11*C23*C32 + C12*C11*C22*C33 + C12*C11*C23*C31 + C12*C11*C22*C32
            + C12*C11*C21*C33 + C12*C11*C22*C31 + C12*C11*C21*C32 + C12*C11*C21*C31 + C12*C23*C21*C33
            + C11*C23*C22*C33 + C12*C23*C21*C32 + C12*C22*C21*C33 + C11*C23*C22*C32 + C12*C23*C21*C31
            + C12*C22*C21*C32 + C11*C23*C22*C31 + C11*C22*C21*C33 + C12*C22*C21*C31 + C11*C22*C21*C32
            + C11*C22*C21*C31 + C12*C23*C33*C31 + C11*C23*C33*C32 + C23*C22*C21*C33 + C12*C23*C32*C31
            + C12*C22*C33*C31 + C11*C22*C33*C32 + C23*C22*C21*C32 + C12*C22*C32*C31 + C12*C21*C33*C31
            + C11*C23*C32*C31 + C11*C21*C33*C32 + C23*C22*C21*C31 + C12*C21*C32*C31 + C11*C22*C32*C31
            + C11*C21*C32*C31 + C23*C22*C33*C31 + C23*C21*C33*C32 + C23*C22*C32*C31 + C22*C21*C33*C32
            + C23*C21*C32*C31 + C22*C21*C33*C31 + C23*C33*C32*C31
            + C22*C33*C32*C31 + C21*C33*C32*C31) + C13
    Ct31 = round(Ct31,2)
    return Ct31

def caculate_Ct32(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct32 = (C22*C21*C13*C12*C33 + C22*C21*C13*C12*C32 + C22*C21*C13*C11*C33 + C22*C21*C13*C12*C31
            + C22*C21*C13*C11*C32 + C22*C21*C13*C11*C31 + C22*C21*C13*C33*C32 + C22*C13*C12*C11*C33
            + C22*C21*C13*C33*C31 + C22*C21*C12*C33*C32 + C22*C13*C12*C11*C32 + C21*C13*C12*C11*C33
            + C22*C21*C12*C33*C31 + C22*C21*C11*C33*C32 + C22*C13*C12*C11*C31 + C21*C13*C12*C11*C32
            + C22*C21*C11*C33*C31 + C21*C13*C12*C11*C31 + C22*C13*C12*C33*C31 + C22*C13*C11*C33*C32
            + C22*C13*C12*C32*C31 + C22*C12*C11*C33*C32 + C21*C13*C12*C33*C31 + C21*C13*C11*C33*C32
            + C22*C13*C11*C32*C31 + C22*C12*C11*C33*C31 + C21*C13*C12*C32*C31 + C21*C12*C11*C33*C32
            + C21*C13*C11*C32*C31 + C21*C12*C11*C33*C31 + C22*C13*C33*C32*C31 + C22*C12*C33*C32*C31
            + C21*C13*C33*C32*C31 + C22*C11*C33*C32*C31 + C21*C12*C33*C32*C31 + C21*C11*C33*C32*C31)/(C22*C21*C13*C33 + C22*C21*C13*C32 + C22*C21*C12*C33 + C22*C21*C13*C31 + C22*C21*C12*C32
            + C22*C21*C11*C33 + C22*C21*C12*C31 + C22*C21*C11*C32 + C22*C21*C11*C31 + C22*C13*C11*C33
            + C21*C13*C12*C33 + C22*C13*C11*C32 + C22*C12*C11*C33 + C21*C13*C12*C32 + C22*C13*C11*C31
            + C22*C12*C11*C32 + C21*C13*C12*C31 + C21*C12*C11*C33 + C22*C12*C11*C31 + C21*C12*C11*C32
            + C21*C12*C11*C31 + C22*C13*C33*C31 + C21*C13*C33*C32 + C13*C12*C11*C33 + C22*C13*C32*C31
            + C22*C12*C33*C31 + C21*C12*C33*C32 + C13*C12*C11*C32 + C22*C12*C32*C31 + C22*C11*C33*C31
            + C21*C13*C32*C31 + C21*C11*C33*C32 + C13*C12*C11*C31 + C22*C11*C32*C31 + C21*C12*C32*C31
            + C21*C11*C32*C31 + C13*C12*C33*C31 + C13*C11*C33*C32 + C13*C12*C32*C31 + C12*C11*C33*C32
            + C13*C11*C32*C31 + C12*C11*C33*C31 + C13*C33*C32*C31
            + C12*C33*C32*C31 + C11*C33*C32*C31) + C23
    Ct32 = round(Ct32,2)
    return Ct32

def caculate_Ct33(C11,C12,C13,C21,C22,C23,C31,C32,C33):
    Ct33 = (C32*C31*C23*C22*C13 + C32*C31*C23*C22*C12 + C32*C31*C23*C21*C13 + C32*C31*C23*C22*C11
            + C32*C31*C23*C21*C12 + C32*C31*C23*C21*C11 + C32*C31*C23*C13*C12 + C32*C23*C22*C21*C13
            + C32*C31*C23*C13*C11 + C32*C31*C22*C13*C12 + C32*C23*C22*C21*C12 + C31*C23*C22*C21*C13
            + C32*C31*C22*C13*C11 + C32*C31*C21*C13*C12 + C32*C23*C22*C21*C11 + C31*C23*C22*C21*C12
            + C32*C31*C21*C13*C11 + C31*C23*C22*C21*C11 + C32*C23*C22*C13*C11 + C32*C23*C21*C13*C12
            + C32*C23*C22*C12*C11 + C32*C22*C21*C13*C12 + C31*C23*C22*C13*C11 + C31*C23*C21*C13*C12
            + C32*C23*C21*C12*C11 + C32*C22*C21*C13*C11 + C31*C23*C22*C12*C11 + C31*C22*C21*C13*C12
            + C31*C23*C21*C12*C11 + C31*C22*C21*C13*C11 + C32*C23*C13*C12*C11 + C32*C22*C13*C12*C11
            + C31*C23*C13*C12*C11 + C32*C21*C13*C12*C11 + C31*C22*C13*C12*C11 + C31*C21*C13*C12*C11)/(C32*C31*C23*C13 + C32*C31*C23*C12 + C32*C31*C22*C13 + C32*C31*C23*C11 + C32*C31*C22*C12
            + C32*C31*C21*C13 + C32*C31*C22*C11 + C32*C31*C21*C12 + C32*C31*C21*C11 + C32*C23*C21*C13
            + C31*C23*C22*C13 + C32*C23*C21*C12 + C32*C22*C21*C13 + C31*C23*C22*C12 + C32*C23*C21*C11
            + C32*C22*C21*C12 + C31*C23*C22*C11 + C31*C22*C21*C13 + C32*C22*C21*C11 + C31*C22*C21*C12
            + C31*C22*C21*C11 + C32*C23*C13*C11 + C31*C23*C13*C12 + C23*C22*C21*C13 + C32*C23*C12*C11
            + C32*C22*C13*C11 + C31*C22*C13*C12 + C23*C22*C21*C12 + C32*C22*C12*C11 + C32*C21*C13*C11
            + C31*C23*C12*C11 + C31*C21*C13*C12 + C23*C22*C21*C11 + C32*C21*C12*C11 + C31*C22*C12*C11
            + C31*C21*C12*C11 + C23*C22*C13*C11 + C23*C21*C13*C12 + C23*C22*C12*C11 + C22*C21*C13*C12
            + C23*C21*C12*C11 + C22*C21*C13*C11 + C23*C13*C12*C11
            + C22*C13*C12*C11 + C21*C13*C12*C11) + C33
    Ct33 = round(Ct33,2)
    return Ct33

#data_cacualte
def data_caculate(data_in,data_out):
    length = len(data_in)
    for i in range(length):
        C11 = data_in[i][0]
        C12 = data_in[i][1]
        C13 = data_in[i][2]
        C21 = data_in[i][3]
        C22 = data_in[i][4]
        C23 = data_in[i][5]
        C31 = data_in[i][6]
        C32 = data_in[i][7]
        C33 = data_in[i][8]
        Ct11 = caculate_Ct11(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct12 = caculate_Ct12(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct13 = caculate_Ct13(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct21 = caculate_Ct21(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct22 = caculate_Ct22(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct23 = caculate_Ct23(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct31 = caculate_Ct31(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct32 = caculate_Ct32(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        Ct33 = caculate_Ct33(C11,C12,C13,C21,C22,C23,C31,C32,C33)
        temp = [Ct11,Ct12,Ct13,Ct21,Ct22,Ct23,Ct31,Ct32,Ct33]
        data_out.append(temp)
    return data_out